import os
import sys
import logging
import numpy as np
from netCDF4 import Dataset

# nautical miles to kilometers conversion factor
nm_to_km = 1.852

def read_tcrmw(filename):
    """
    Read pressure level variables from
    netcdf file generated by the TCRMW tool.
    """

    try:
        file_id = Dataset(filename, 'r')
        logging.info('reading ' + filename)
    except IOError:
        logging.error('failed to open ' + filename)
        sys.exit()

    valid_time = file_id.variables['valid_time'][:]
    # read grid variables
    lat_grid = file_id.variables['lat'][:]
    lon_grid = file_id.variables['lon'][:]
    range_grid = file_id.variables['range'][:]
    azimuth_grid = file_id.variables['azimuth'][:]
    pressure_grid = file_id.variables['pressure'][:]

    logging.debug('lat_grid.shape=' + str(lat_grid.shape))
    logging.debug('lon_grid.shape=' + str(lon_grid.shape))

    # read track center and cyclone radius
    track_data = {}
    track_data['Lat'] = file_id.variables['Lat'][:]
    track_data['Lon'] = file_id.variables['Lon'][:]
    track_data['RMW'] = file_id.variables['RMW'][:] * nm_to_km

    # possible U, V variable names
    u_vars = set(['U', 'UGRD'])
    v_vars = set(['V', 'VGRD'])

    grid_vars = set(['lat', 'lon', 'range', 'azimuth', 'pressure'])
    wind_data = {}
    scalar_data = {}

    # read all variables and group as either wind or scalar
    for var in file_id.variables:
        logging.info(var)
        if var in u_vars:
            wind_data['U'] = file_id.variables[var][:]
        if var in v_vars:
            wind_data['V'] = file_id.variables[var][:]
        if var not in grid_vars.union(u_vars).union(v_vars):
            scalar_data[var] = file_id.variables[var][:]

    file_id.close()

    return valid_time, lat_grid, lon_grid, \
        range_grid, azimuth_grid, pressure_grid, \
        track_data, wind_data, scalar_data

def read_tcrmw_levels(filename, levels=['L0']):
    """
    Read level-labeled variables from
    netcdf file generated by the TCRMW tool.
    """

    try:
        file_id = Dataset(filename, 'r')
        logging.info('reading ' + filename)
    except IOError:
        logging.error('failed to open ' + filename)
        sys.exit()

    valid_time = file_id.variables['valid_time'][:]
    lat_grid = file_id.variables['lat'][:]
    lon_grid = file_id.variables['lon'][:]

    logging.debug('lat_grid.shape=' + str(lat_grid.shape))
    logging.debug('lon_grid.shape=' + str(lon_grid.shape))

    grid_vars = set(['lat', 'lon', 'range', 'azimuth'])
    wind_data = {}
    scalar_data = {}

    for level in levels:
        u_vars = set(['U_' + level, 'UGRD_' + level])
        v_vars = set(['V_' + level, 'VGRD_' + level])

        for var in file_id.variables:
            logging.info(var)
            if var in u_vars:
                wind_data['U'] = file_id.variables[var][:]
            if var in v_vars:
                wind_data['V'] = file_id.variables[var][:]
            if var not in grid_vars.union(u_vars).union(v_vars):
                scalar_data[var] = file_id.variables[var][:]

    file_id.close()

    return valid_time, lat_grid, lon_grid, wind_data, scalar_data
